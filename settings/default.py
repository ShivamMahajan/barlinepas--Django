#! /usr/bin/env python2.7
"""
Django settings for AMD(Aviation Mishaps Database) project.

Generated by 'django-admin startproject' using Django 1.8.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""
import os
import sys
import json

# Django settings for {{ AMD }} - suitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

DEBUG = True
ALLOWED_HOSTS = (

)

# SECURITY WARNING: keep the secret key used in production secret!
# Make this unique, and don't share it with anybody.
# http://www.miniwebtool.com/django-secret-key-generator/
SECRET_KEY = 'blp-app353157&ea=)0hmqz$hx^j_$lugg8*$w*q!em$86n8!l08rb3!4blp-app'

#config =json.loads(open("config.json").read())
WEBSITE_ROOT = os.path.abspath(os.path.dirname(os.path.dirname(__file__))).replace('\\', '/')
#config =json.loads(open("config.json").read())
config =json.loads(open(WEBSITE_ROOT+"/config.json", "r").read())
#config =json.loads(open("/usr/local/blp_app/config.json").read())
#WEBSITE_ROOT = os.path.abspath(os.path.dirname(os.path.dirname(__file__))).replace('\\', '/')
#print "WEBSITE_ROOT"
#print WEBSITE_ROOT
# Absolute paths for where the project and templates are stored.
ABS_PROJECT_ROOT = config['root_dir']
ABS_PROJECT_ROOT_THIRD =  ABS_PROJECT_ROOT+'third/'
#ABS_TEMPLATES_PATH = '%s/templates' % ABS_PROJECT_ROOT
APPLICATION_HTTP_DIRECTORY = '/search/'

#sys.path.insert(0,ABS_APPS_ROOT)
# add root directory to PYTHONPATH
if ABS_PROJECT_ROOT not in sys.path:
    sys.path.insert(0, ABS_PROJECT_ROOT)

ADMINS = (
    ('Nadir Hamid', 'matrix.nad@gmail.com'),
    ('Shaun Dauson')
)
MANAGERS = ADMINS


ROOT_URLCONF = 'blp_app.urls'

# Python dotted path to the WSGI application used by Django's runserver.
# disabled - outsite the app
#WSGI_APPLICATION = 'blp_app.wsgi'

# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

#DATABASES = {
# #   'default': {
# 	'ENGINE': 'django.db.backends.sqlite3',
# 	'NAME':  config['db_file'],
#   	#'USERNAME': 'bbfe2e45329fc8',
# 	#'PASSWORD': '1ebf7d14',
#   	#'DATABASE': 'main_data',
# 	#'HOST': 'us-cdbr-azure-east-a.cloudapp.net'
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'blpass',
        'USER': 'root',
        'PASSWORD': 'htp@123',
        'HOST': '127.0.0.1',
    }
}

# Application definition
# django debugging stuff
ADMIN_TOOLS = (
)

# django
DJANGO_APPS = (
    #'django.contrib.admin',
    #'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.staticfiles'

)

LOCAL_APPS = (
    'blp_app.home',
    'blp_app.listings',
    'blp_app.user',
    'blp_app.generics',
    'blp_app.pages',
    'blp_app.dodirect',
)

EXTERNAL_APPS = (
    'django_extensions',
    'compressor',
    #'sslserver',
    'pyqrcode',
    #'payments',
    'mathfilters',
    'bootstrap3'
)

# the order is important!


INSTALLED_APPS = DJANGO_APPS + LOCAL_APPS + EXTERNAL_APPS

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

# Absolute path to the directory static files should be collected to.
# Don't put anything in this directory yourself; store your static files
# in the directory "static-assets/" then do `./manage.py migrate` on
# production.
STATIC_ROOT = '%s/static/' % ABS_PROJECT_ROOT_THIRD
# Absolute filesystem path to the directory that will hold user-uploaded files.
MEDIA_ROOT = '%s/media/' % ABS_PROJECT_ROOT_THIRD
print STATIC_ROOT
print MEDIA_ROOT
# The URL that handles the media, static, etc.
STATIC_URL = '/static/'
MEDIA_URL = '/media/'

# THE REST IS PRETTY MUCH DEFAULT

# Additional locations of static files
STATICFILES_DIRS = (
    '%s/static-assets' % ABS_PROJECT_ROOT_THIRD,
    '%s/media' % ABS_PROJECT_ROOT_THIRD,
)


# List of finder classes that know how to find static files in various
# locations.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    # other finders..
    'compressor.finders.CompressorFinder',
)

SITE_ID = 1

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = None

USE_I18N = True

USE_L10N = True

USE_TZ = False


TEMPLATE_CONTEXT_PROCESSORS =  (
#        'django.contrib.auth.context_processors.auth',
#        'django.contrib.auth.context_processors.debug',
    "yourapp.context_processors.categories"
)

TEMPLATES = [
  {
  'BACKEND': 'django.template.backends.django.DjangoTemplates',
  'APP_DIRS': True,
  }
]


MIDDLEWARE_CLASSES = (
   'django.contrib.sessions.middleware.SessionMiddleware',
)

## make sure we update sessions every
## time for login, logout and multiple
## logins
SESSION_SAVE_EVERY_REQUEST = True

# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error when DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
    }
}



SECURE_SSL_REDIRECT = True
